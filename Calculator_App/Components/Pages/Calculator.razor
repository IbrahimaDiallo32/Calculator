@page "/calculator"
@rendermode InteractiveServer

<h1>Calculator</h1>

<label for = "inputA">Input A</label>
<label for = "inputB"> Input B</label>
<div>
    <input type="text" @bind= "inputA" placeholder="0"> 
    <input type="text" @bind= "inputB" placeholder="0"> 
        
</div>

<div>
    <button @onclick= "AddNumbers" background-color = "#EBEBEB" color = "#000000">A + B</button>
</div>

<div>
    <button @onclick= "SubtractNumbers">A - B</button>
</div>
<div>
    <button @onclick= "MultiplyNumbers">A * B</button>
</div>
<div>
    <button @onclick= "DivideNumbers">A / B</button>
</div>
<div>
    <button @onclick= "CompareTwoNumbers">A == B</button>
</div>



@if (result.HasValue)
{
    <h3>Result: @result</h3>
}
@if (error)
{
    <h3>Not a number</h3>
}
@if (invalidInput)
{
    <h3>Invalid Input, Numbers Only</h3>
}


@code {
    string? inputA { get; set; }
    string? inputB { get; set; }
    float? result { get; set; }
    bool error { get; set; }
    bool invalidInput { get; set; }
   
    
    //This method will return true if both user inputs are able to be parsed to float values 
    private bool IsValidInput()
    {
        if (float.TryParse(inputA, out float temp1) && float.TryParse(inputB, out float temp2))
        {
            return true;
        }
        return false;
    }

    private void AddNumbers()
    {
        //checking for invalid input
        if (!IsValidInput())
        {
            invalidInput = true;
            result = null;
        }
        else
        {
            invalidInput = false;
            //parsing inputs to temporary variables to perform operation 
            float x = float.Parse(inputA);
            float y = float.Parse(inputB);
            result = x + y;
        }
    }

    //Method to subtract numbers
    private void SubtractNumbers()
    {
        //If inputs have values complete the operation
        if (!IsValidInput())
        {
            result = null;
            invalidInput = true;
        }
        
        else
        {
            invalidInput = false;
            float x = float.Parse(inputA);
            float y = float.Parse(inputB);
            result = x - y;
        }
    }

    private void MultiplyNumbers()
    {
        if (!IsValidInput())
        {
            result = null;
            invalidInput = true;
        }
        
        else
        {
            invalidInput = false;
            float x = float.Parse(inputA);
            float y = float.Parse(inputB);
            result = x * y;
        }
    }

    //Method to divide numbers catching division by 0 here.
    private void DivideNumbers()
    {
        if (!IsValidInput())
        {
            result = null;
            invalidInput = true;
        }
        else
        {
            invalidInput = false;
            float x = float.Parse(inputA);
            float y = float.Parse(inputB);
            
            //catch division by 0 error and set error boolean to true
            if (y == 0.0)
            {
                error = true;
                result = null;
            }
            else
            {
                error = false;
                result = x / y;
            }
        }
    }
    private void CompareTwoNumbers()
    {
        if (!IsValidInput())
        {
            result = null;
            invalidInput = true;
        }
        else
        {
            invalidInput = false;
            float x = float.Parse(inputA);
            float y = float.Parse(inputB);
            if (Math.Round(x, 8) == Math.Round(y, 8))
            {
                result = 1;
            }
            else
            {
                result = 0;
            }
        }
    }
}
