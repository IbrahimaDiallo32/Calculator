@page "/calculator"
@using System.Reflection
@rendermode InteractiveServer

<div class="container">

<h1>Calculator</h1>
<h2><button @onclick= "clearInputs">Clear</button></h2>

<label for = "inputA">Input A</label>
<label for = "inputB"> Input B</label>
<div>
    <input type="text" @bind= "inputA" placeholder="0"> 
    <input type="text" @bind= "inputB" placeholder="0"> 
        
</div>

<div class = "upperInputs">
    <h3>A and B    A Only</h3>
    
</div>

<div>
    <button id="blag" @onclick= "AddNumbers">A + B</button>
    <button id="blag" @onclick = "FactorialOfInput">A!</button>
</div>

<div class="try">
    <button id="blag" @onclick= "SubtractNumbers">A - B</button>
    <button id="blag" @onclick = "SinOfNumber">sin A</button>
</div>
<div>
    <button id="blag" @onclick= "MultiplyNumbers">A * B</button>
    <button id="blag" @onclick = "CosOfNumber">cos A</button>
</div>
<div>
    <button id="blag" @onclick= "DivideNumbers">A / B</button>
    <button id="blag" @onclick = "TanOfNUmber">tan A</button>
</div>
<div>
    <button id="blag" @onclick= "CompareTwoNumbers">A == B</button>
    <button id="blag" @onclick= "ReciprocalOfNumber">1 / A</button>
</div>
<div>
    <button id="blag" @onclick ="RaisePower">A ^ B</button>
</div>
<div>
    <button id="blag" @onclick = "LogOfNumber">A log B</button>
    
</div>
<div>
    <button id="blag" @onclick = "RootOfNumber">A root B</button>
</div>

</div>
<style>
button{border-radius: 7px; width: 18%; padding: .2%; background-color: #EBEBEB; color: #000000;}
.container {
        flex-direction: column;
        align-items: center;
        justify-content: center;
        margin: auto;
    }
</style>



@*<div class="input-group">
    <label for="inputA">Input A</label>
    <input type="text" @bind="inputA" placeholder="0">
</div>

<div class="input-group">
    <label for="inputB">Input B</label>
    <input type="text" @bind="inputB" placeholder="0">
</div>

<div class="button-group">
    <button @onclick="AddNumbers">A + B</button>
    <button @onclick="SubtractNumbers">A - B</button>
</div>

<div class="button-group">
    <button @onclick="MultiplyNumbers">A * B</button>
    <button @onclick="DivideNumbers">A / B</button>
</div>

<div class="button-group">
    <button @onclick="FactorialOfInput">A!</button>
    <button @onclick="SinOfNumber">sin A</button>
</div>

<style>
    .input-group {
        margin-bottom: 10px;
    }

    .button-group {
        margin-bottom: 10px;
    }

    button {
        border-radius: 7px;
        width: 100px; /* Adjust width as needed */
        padding: 5px; /* Adjust padding as needed */
        background-color: #EBEBEB;
        color: #000000;
        margin-right: 10px; /* Adjust margin as needed */
    }
</style>

*@

@if (result.HasValue)
{
    <h3>Result: @result</h3>
}
@if (error)
{
    <h3>Not a number</h3>
}
@if (invalidInput)
{
    <h3>Invalid Input, Numbers Only</h3>
}


@code {
    string? inputA { get; set; }
    string? inputB { get; set; }
    double? result { get; set; }
    bool error { get; set; }
    bool invalidInput { get; set; }


    //This method will return true if both user inputs are able to be parsed to double values 
    private bool IsValidInput()
    {
        if (double.TryParse(inputA, out double temp1) && double.TryParse(inputB, out double temp2))
        {
            return true;
        }
        return false;
    }

    private void AddNumbers()
    {
        //preq-ENGINE-3
        //checking for invalid input
        if (!IsValidInput())
        {
            invalidInput = true;
            result = null;
        }
        else
        {
            error = false;
            invalidInput = false;
            //parsing inputs to temporary variables to perform operation 
            double x = double.Parse(inputA);
            double y = double.Parse(inputB);
            result = x + y;
        }
    }

    //Method to subtract numbers
    private void SubtractNumbers()
    {
        //If inputs have values complete the operation
        if (!IsValidInput())
        {
            result = null;
            invalidInput = true;
        }

        else
        {
            error = false;
            invalidInput = false;
            double x = double.Parse(inputA);
            double y = double.Parse(inputB);
            result = x - y;
        }
    }

    private void MultiplyNumbers()
    {
        if (!IsValidInput())
        {
            result = null;
            invalidInput = true;
        }

        else
        {
            error = false;
            invalidInput = false;
            double x = double.Parse(inputA);
            double y = double.Parse(inputB);
            result = x * y;
        }
    }

    //Method to divide numbers catching division by 0 here.
    private void DivideNumbers()
    {
        if (!IsValidInput())
        {
            result = null;
            invalidInput = true;
        }
        else
        {
            invalidInput = false;
            double x = double.Parse(inputA);
            double y = double.Parse(inputB);

            //catch division by 0 error and set error boolean to true
            if (y == 0.0)
            {
                error = true;
                result = null;
            }
            else
            {
                error = false;
                result = x / y;
            }
        }
    }

    private void CompareTwoNumbers()
    {
        if (!IsValidInput())
        {
            result = null;
            invalidInput = true;
        }
        else
        {
            error = false;
            invalidInput = false;
            double x = double.Parse(inputA);
            double y = double.Parse(inputB);
            if (Math.Round(x, 8) == Math.Round(y, 8))
            {
                result = 1;
            }
            else
            {
                result = 0;
            }
        }
    }

    private void RaisePower()
    {
        if (!IsValidInput())
        {
            result = null;
            invalidInput = true;
        }
        else
        {
            error = false;
            invalidInput = false;
            double x = double.Parse(inputA);
            double y = double.Parse(inputB);
            result = Math.Pow(x, y);
        }
    }

    private void LogOfNumber()
    {
        if (!IsValidInput())
        {
            result = null;
            invalidInput = true;
        }
        else
        {
            double x = double.Parse(inputA);
            double y = double.Parse(inputB);
            if (x <= 0 || y == 0)
            {
                error = true;
                result = null;
            }
            else
            {
                error = false;
                invalidInput = false;
                result = Math.Log(x, y);
            }
        }
    }

    public void RootOfNumber()
    {
        if (!IsValidInput())
        {
            result = null;
            invalidInput = true;
        }
        else
        {
            double x = double.Parse(inputA);
            double y = double.Parse(inputB);
            if (y == 0)
            {
                error = true;
                result = null;
            }
            else
            {
                error = false;
                invalidInput = false;
                //this raises 'A' to the Y or "n'th" root.
                result = Math.Pow(x, (1 / y));
            }
        }
    }

    public double FactorialOfDouble(double temp)
    {
        if (temp < 0)
        {
            return -1;
        }

        if (temp >= 0 && temp <= 1)
        {
            return 1;
        }

        return temp * FactorialOfDouble(temp - 1);
    }

    private void FactorialOfInput()
    {
        if (!IsValidInput())
        {
            result = null;
            invalidInput = true;
        }
        else
        {
            error = false;
            invalidInput = false;
            double x = double.Parse(inputA);
            result = FactorialOfDouble(x);
        }
    }

    private void SinOfNumber()
    {
        if (!IsValidInput())
        {
            result = null;
            invalidInput = true;
        }
        else
        {
            error = false;
            invalidInput = false;
            double x = double.Parse(inputA);
            result = Math.Sin(x);
        }
    }

    private void CosOfNumber()
    {
        if (!IsValidInput())
        {
            result = null;
            invalidInput = true;
        }
        else
        {
            error = false;
            invalidInput = false;
            double x = double.Parse(inputA);
            result = Math.Cos(x);
        }
    }

    private void TanOfNUmber()
    {
        if (!IsValidInput())
        {
            result = null;
            invalidInput = true;
        }
        else
        {
            error = false;
            invalidInput = false;
            double x = double.Parse(inputA);
            result = Math.Tan(x);
        }
    }

    private void ReciprocalOfNumber()
    {
        if (!IsValidInput())
        {
            result = null;
            invalidInput = true;
        }
        else
        {
            double x = double.Parse(inputA);
            if (x == 0)
            {
                error = true;
                result = null;
            }
            else
            {
                error = false;
                invalidInput = false;
                result = (1 / x);
            }
        }
    }
    public void clearInputs()
    {
        inputA = null;
        inputB = null;
        result = null;
        error = false;
        invalidInput = false;
    }
}
