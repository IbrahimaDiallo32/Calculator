@page "/"
@using CalculatorEngine

@rendermode InteractiveServer

<div class="outerContainer">
    
    <h1>Calculator <button @onclick= "clearInputs" id="clearButton">Clear</button></h1>


    <label for = "inputA"><b>Input A</b></label>
    <label for = "inputB" id = "spaceIndentForText"><b>Input B</b></label>
<div>
    <input type="text" class = "inputBoxes" @bind= "inputA" placeholder="0"> 
    <input type="text" class = "inputBoxes" id = "spaceIndentForInputBox" @bind= "inputB" placeholder="0"> 
</div>

<div class = "upperInputs">
    <h4>A and B    A Only</h4>
    
</div>

<div>
    <button class = "styleForCalculatorFunctionButtons" @onclick= "AddNumbers">A + B</button>
    <button class="styleForCalculatorFunctionButtons" @onclick = "FactorialOfInput">A!</button>
</div>

<div class="try">
    <button class="styleForCalculatorFunctionButtons" @onclick= "SubtractNumbers">A - B</button>
    <button class="styleForCalculatorFunctionButtons" @onclick= "SinOfNumber">sin A</button>
</div>
<div>
    <button class="styleForCalculatorFunctionButtons" @onclick= "MultiplyNumbers">A * B</button>
    <button class="styleForCalculatorFunctionButtons" @onclick = "CosOfNumber">cos A</button>
</div>
<div>
    <button class="styleForCalculatorFunctionButtons" @onclick= "DivideNumbers">A / B</button>
    <button class="styleForCalculatorFunctionButtons" @onclick = "TanOfNUmber">tan A</button>
</div>
<div>
    <button class="styleForCalculatorFunctionButtons" @onclick= "CompareTwoNumbers">A == B</button>
    <button class="styleForCalculatorFunctionButtons" @onclick= "ReciprocalOfNumber">1 / A</button>
</div>
<div>
    <button class="styleForCalculatorFunctionButtons" @onclick ="RaisePower">A ^ B</button>
</div>
<div>
    <button class="styleForCalculatorFunctionButtons" @onclick = "LogOfNumber">A log B</button>
    
</div>
<div>
    <button class="styleForCalculatorFunctionButtons" @onclick = "RootOfNumber">A root B</button>
</div>

</div>


@if (result.HasValue)
{
    <h3>Result: @result</h3>
}
@if (error)
{
    <h3>Not a number</h3>
}
@if (invalidInput)
{
    <h3>Invalid Input, Numbers Only</h3>
}


@code {
    string? inputA { get; set; }
    string? inputB { get; set; }
    double? result { get; set; }
    bool error { get; set; }
    bool invalidInput { get; set; }

    //This method will return true if both user inputs are able to be parsed to double values 
    private bool IsValidInput()
    {
        return double.TryParse(inputA, out double temp1) && double.TryParse(inputB, out double temp2);
    }

    private void AddNumbers()
    {
        //preq-ENGINE-3
        //checking for invalid input
        if (!IsValidInput())
        {
            invalidInput = true;
            result = null;
            return;
        }
        error = false;
        invalidInput = false;
        //parsing inputs to temporary variables to perform operation 
        double x = double.Parse(inputA);
        double y = double.Parse(inputB);
        result = CalculatorLogic.AddTwoNumbers(x, y);
    }

    //Method to subtract numbers
    private void SubtractNumbers()
    {
        //preq-ENGINE-4
        //If inputs have valid values complete the operation
        if (!IsValidInput())
        {
            result = null;
            invalidInput = true;
            return;
        }
            error = false;
            invalidInput = false;
            double x = double.Parse(inputA);
            double y = double.Parse(inputB);
            result = x - y;
    }

    private void MultiplyNumbers()
    {
        //preq-ENGINE-5
        if (!IsValidInput())
        {
            result = null;
            invalidInput = true;
            return;
        }
            error = false;
            invalidInput = false;
            double x = double.Parse(inputA);
            double y = double.Parse(inputB);
            result = CalculatorLogic.MultiplyTwoNumbers(x, y);
    }

    //Method to divide numbers catching division by 0 here.
    private void DivideNumbers()
    {
        //preq-ENGINE-7
        if (!IsValidInput())
        {
            result = null;
            invalidInput = true;
            return;
        }
            invalidInput = false;
            double x = double.Parse(inputA);
            double y = double.Parse(inputB);

            //catch division by 0 error and set error boolean to true
            if (y == 0.0)
            {
                error = true;
                result = null;
            }
            else
            {
                error = false;
                result = CalculatorLogic.DivideTwoNumbers(x, y);
            }
    }

    private void CompareTwoNumbers()
    {
        //preq-ENGINE-8
        if (!IsValidInput())
        {
            result = null;
            invalidInput = true;
        }
        else
        {
            error = false;
            invalidInput = false;
            double x = double.Parse(inputA);
            double y = double.Parse(inputB);
            if (Math.Round(x, 8) == Math.Round(y, 8))
            {
                result = 1;
            }
            else
            {
                result = 0;
            }
        }
    }

    private void RaisePower()
    {
        //preq-ENGINE-9
        if (!IsValidInput())
        {
            result = null;
            invalidInput = true;
        }
        else
        {
            error = false;
            invalidInput = false;
            double x = double.Parse(inputA);
            double y = double.Parse(inputB);
            result = Math.Pow(x, y);
        }
    }

    private void LogOfNumber()
    {
        //preq-ENGINE-10
        if (!IsValidInput())
        {
            result = null;
            invalidInput = true;
        }
        else
        {
            double x = double.Parse(inputA);
            double y = double.Parse(inputB);
            if (x <= 0 || y == 0)
            {
                error = true;
                result = null;
            }
            else
            {
                error = false;
                invalidInput = false;
                result = Math.Log(x, y);
            }
        }
    }

    public void RootOfNumber()
    {
        //preq-ENGINE-11
        if (!IsValidInput())
        {
            result = null;
            invalidInput = true;
        }
        else
        {
            double x = double.Parse(inputA);
            double y = double.Parse(inputB);
            if (y == 0)
            {
                error = true;
                result = null;
            }
            else
            {
                error = false;
                invalidInput = false;
                //this raises 'A' to the Y or "n'th" root.
                result = Math.Pow(x, (1 / y));
            }
        }
    }

    public double FactorialOfDouble(double temp)
    {
        //preq-ENGINE-12
        if (temp < 0)
        {
            return -1;
        }

        if (temp >= 0 && temp <= 1)
        {
            return 1;
        }

        return temp * FactorialOfDouble(temp - 1);
    }

    private void FactorialOfInput()
    {
        if (!IsValidInput())
        {
            result = null;
            invalidInput = true;
        }
        else
        {
            error = false;
            invalidInput = false;
            double x = double.Parse(inputA);
            result = FactorialOfDouble(x);
        }
    }

    private void SinOfNumber()
    {
        //preq-ENGINE-13
        if (!IsValidInput())
        {
            result = null;
            invalidInput = true;
        }
        else
        {
            error = false;
            invalidInput = false;
            double x = double.Parse(inputA);
            result = Math.Sin(x);
        }
    }

    private void CosOfNumber()
    {
        //preq-ENGINE-14
        if (!IsValidInput())
        {
            result = null;
            invalidInput = true;
        }
        else
        {
            error = false;
            invalidInput = false;
            double x = double.Parse(inputA);
            result = Math.Cos(x);
        }
    }

    private void TanOfNUmber()
    {
        //preq-ENGINE-15
        if (!IsValidInput())
        {
            result = null;
            invalidInput = true;
        }
        else
        {
            error = false;
            invalidInput = false;
            double x = double.Parse(inputA);
            result = Math.Tan(x);
        }
    }

    private void ReciprocalOfNumber()
    {
        //preq-ENGINE-16
        if (!IsValidInput())
        {
            result = null;
            invalidInput = true;
        }
        else
        {
            double x = double.Parse(inputA);
            if (x == 0)
            {
                error = true;
                result = null;
            }
            else
            {
                error = false;
                invalidInput = false;
                result = (1 / x);
            }
        }
    }
    public void clearInputs()
    {
        inputA = null;
        inputB = null;
        result = null;
        error = false;
        invalidInput = false;
    }
}
